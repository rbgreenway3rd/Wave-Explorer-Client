{"version":3,"file":"static/js/72.8bcafafa.chunk.js","mappings":"AAgEAA,KAAKC,UAAY,SAAUC,GACzB,MAAM,KAAEC,EAAI,QAAEC,GAAYF,EAAEC,KAEtBE,EAhER,SAAcF,EAAMG,GAClB,IAAKC,MAAMC,QAAQL,IAASG,GAAaH,EAAKM,QAAUH,EAAY,EAClE,OAAOH,EAGT,MAAMO,EAAU,GAEVC,GAASR,EAAKM,OAAS,IAAMH,EAAY,GAE/C,IAAIM,EAAI,EACRF,EAAQG,KAAKV,EAAKS,IAElB,IAAK,IAAIE,EAAI,EAAGA,EAAIR,EAAY,EAAGQ,IAAK,CAEtC,MAAMC,EAAaC,KAAKC,OAAOH,EAAI,GAAKH,GAAS,EAC3CO,EAAWF,KAAKC,OAAOH,EAAI,GAAKH,GAAS,EAIzCQ,GAHQhB,EAAKiB,MAAML,EAAYG,GAGtBf,EAAKS,IAGpB,IAAIS,EAAO,EACTC,EAAO,EACT,IAAK,IAAIC,EAAIR,EAAYQ,EAAIL,EAAUK,IAAK,CAAC,IAADC,EAAAC,EAC1CJ,IAAe,QAAPG,EAAArB,EAAKoB,UAAE,IAAAC,OAAA,EAAPA,EAASE,IAAK,EACtBJ,IAAe,QAAPG,EAAAtB,EAAKoB,UAAE,IAAAE,OAAA,EAAPA,EAASE,IAAK,CACxB,CACA,MAAMC,EAAcV,EAAWH,EAC/BM,GAAQO,GAAe,EACvBN,GAAQM,GAAe,EAGvB,IACIC,EADAC,GAAW,EAEXC,EAAQhB,EAEZ,IACE,IAAIQ,EAAIP,KAAKC,MAAMH,EAAIH,GAAS,EAChCY,EAAIP,KAAKC,OAAOH,EAAI,GAAKH,GAAS,EAClCY,IACA,CAEA,MAAMS,EAAOhB,KAAKiB,KACfd,EAAOO,EAAIvB,EAAKoB,GAAGG,IAAMJ,EAAOH,EAAOQ,IACrCR,EAAOO,EAAIL,IAASlB,EAAKoB,GAAGI,EAAIR,EAAOQ,IAExCK,EAAOF,IACTA,EAAUE,EACVH,EAAe1B,EAAKoB,GACpBQ,EAAQR,EAEZ,CACAb,EAAQG,KAAKgB,GACbjB,EAAImB,CACN,CAGA,OADArB,EAAQG,KAAKV,EAAKA,EAAKM,OAAS,IACzBC,CACT,CAKoBwB,CAAK/B,EAAMC,GAAW,KACxCJ,KAAKmC,YAAY,CAAE9B,cAEnB+B,QAAQC,IAAIhC,EACd","sources":["workers/decimateWorker.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\n\n// LTTB decimation for {x, y} arrays\nfunction lttb(data, threshold) {\n  if (!Array.isArray(data) || threshold >= data.length || threshold < 3) {\n    return data;\n  }\n\n  const sampled = [];\n  // Bucket size. Leave room for first and last point\n  const every = (data.length - 2) / (threshold - 2);\n\n  let a = 0; // Initially a is the first point in the triangle\n  sampled.push(data[a]); // Always add the first point\n\n  for (let i = 0; i < threshold - 2; i++) {\n    // Calculate range for this bucket\n    const rangeStart = Math.floor((i + 1) * every) + 1;\n    const rangeEnd = Math.floor((i + 2) * every) + 1;\n    const range = data.slice(rangeStart, rangeEnd);\n\n    // Point a\n    const pointA = data[a];\n\n    // Calculate average for next bucket\n    let avgX = 0,\n      avgY = 0;\n    for (let j = rangeStart; j < rangeEnd; j++) {\n      avgX += data[j]?.x || 0;\n      avgY += data[j]?.y || 0;\n    }\n    const rangeLength = rangeEnd - rangeStart;\n    avgX /= rangeLength || 1;\n    avgY /= rangeLength || 1;\n\n    // Find the point in this bucket that forms the largest triangle\n    let maxArea = -1;\n    let maxAreaPoint;\n    let nextA = rangeStart;\n\n    for (\n      let j = Math.floor(i * every) + 1;\n      j < Math.floor((i + 1) * every) + 1;\n      j++\n    ) {\n      // Calculate area\n      const area = Math.abs(\n        (pointA.x - data[j].x) * (avgY - pointA.y) -\n          (pointA.x - avgX) * (data[j].y - pointA.y)\n      );\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    sampled.push(maxAreaPoint);\n    a = nextA;\n  }\n\n  sampled.push(data[data.length - 1]); // Always add the last point\n  return sampled;\n}\n\nself.onmessage = function (e) {\n  const { data, samples } = e.data;\n  // Use LTTB for decimation\n  const decimated = lttb(data, samples || 500);\n  self.postMessage({ decimated });\n\n  console.log(decimated);\n};\n"],"names":["self","onmessage","e","data","samples","decimated","threshold","Array","isArray","length","sampled","every","a","push","i","rangeStart","Math","floor","rangeEnd","pointA","slice","avgX","avgY","j","_data$j","_data$j2","x","y","rangeLength","maxAreaPoint","maxArea","nextA","area","abs","lttb","postMessage","console","log"],"sourceRoot":""}