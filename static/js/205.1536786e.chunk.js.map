{"version":3,"file":"static/js/205.1536786e.chunk.js","mappings":"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","sources":["workers/extractWorker.js"],"sourcesContent":["// src/workers/extractWorker.js\n\n// All pure helper functions from DataProvider.js (no React state, no imports)\n\nfunction generateRowLabels(extractedRows) {\n  const labels = [];\n  for (let i = 0; i < extractedRows; i++) {\n    let label = \"\";\n    let n = i;\n    while (n >= 0) {\n      label = String.fromCharCode((n % 26) + 65) + label;\n      n = Math.floor(n / 26) - 1;\n    }\n    labels.push(label);\n  }\n  return labels;\n}\n\nfunction extractProjectTitle(content) {\n  const lines = content.split(\"\\n\");\n  const startIndex = lines.findIndex((line) => line.includes(\"Project\"));\n  if (startIndex !== -1) {\n    const projectLine = lines[startIndex];\n    const projectParts = projectLine.split(\"\\t\");\n    if (projectParts.length > 1) {\n      return projectParts[1].trim();\n    }\n  }\n  return \"\";\n}\n\nfunction extractProjectDate(content) {\n  const lines = content.split(\"\\n\");\n  const startIndex = lines.findIndex((line) => line.includes(\"Date\"));\n  if (startIndex !== -1) {\n    const dateLine = lines[startIndex];\n    const dateParts = dateLine.split(\"\\t\");\n    if (dateParts.length > 1) {\n      return dateParts[1].trim();\n    }\n  }\n  return \"\";\n}\n\nfunction extractProjectTime(content) {\n  const lines = content.split(\"\\n\");\n  const startIndex = lines.findIndex((line) => line.includes(\"Time\"));\n  if (startIndex !== -1) {\n    const timeLine = lines[startIndex];\n    const timeParts = timeLine.split(\"\\t\");\n    if (timeParts.length > 1) {\n      return timeParts[1].trim();\n    }\n  }\n  return \"\";\n}\n\nfunction extractInstrument(content) {\n  const lines = content.split(\"\\n\");\n  const startIndex = lines.findIndex((line) => line.includes(\"Instrument\"));\n  if (startIndex !== -1) {\n    const instrumentLine = lines[startIndex];\n    const instrumentParts = instrumentLine.split(\"\\t\");\n    if (instrumentParts.length > 1) {\n      return instrumentParts[1].trim();\n    }\n  }\n  return \"\";\n}\n\nfunction extractProjectProtocol(content) {\n  const lines = content.split(\"\\n\");\n  const startIndex = lines.findIndex((line) => line.includes(\"ProtocolName\"));\n  if (startIndex !== -1) {\n    const protocolLine = lines[startIndex];\n    const protocolParts = protocolLine.split(\"\\t\");\n    if (protocolParts.length > 1) {\n      return protocolParts[1].trim();\n    }\n  }\n  return \"\";\n}\n\nfunction extractIndicatorConfigurations(content) {\n  const lines = content.split(\"\\n\");\n  const indicatorConfigurations = [];\n  lines.forEach((line) => {\n    if (line.includes(\"Indicator\")) {\n      const parts = line.split(\"\\t\");\n      if (parts.length >= 9) {\n        const config = {\n          name: parts[1].trim(),\n          Excitation: parts[3].trim(),\n          Emission: parts[5].trim(),\n          Exposure: parts[7].trim(),\n          Gain: parts[9].trim(),\n        };\n        indicatorConfigurations.push(config);\n      }\n    }\n  });\n  return indicatorConfigurations;\n}\n\nfunction extractOperator(content) {\n  const lines = content.split(\"\\n\");\n  const startIndex = lines.findIndex((line) => line.includes(\"NumCols\"));\n  const endIndex = lines.findIndex((line) => line.includes(\"Project\"));\n  if (startIndex !== -1 && endIndex !== -1 && startIndex < endIndex) {\n    const operatorLine = lines.slice(startIndex + 1, endIndex)[0];\n    return operatorLine\n      .split(\"\\t\")\n      .slice(1)\n      .map((part) => part.trim());\n  }\n  return [];\n}\n\nfunction extractAssayPlateBarcode(content) {\n  const lines = content.split(\"\\n\");\n  const startIndex = lines.findIndex((line) =>\n    line.includes(\"AssayPlateBarcode\")\n  );\n  if (startIndex !== -1) {\n    const barcodeLine = lines[startIndex];\n    const barcodeParts = barcodeLine.split(\"\\t\");\n    if (barcodeParts.length > 1) {\n      return barcodeParts[1].trim();\n    }\n  }\n  return \"\";\n}\n\nfunction extractAddPlateBarcode(content) {\n  const lines = content.split(\"\\n\");\n  const startIndex = lines.findIndex((line) =>\n    line.includes(\"AddPlateBarcode\")\n  );\n  if (startIndex !== -1) {\n    const barcodeLine = lines[startIndex];\n    const barcodeParts = barcodeLine.split(\"\\t\");\n    if (barcodeParts.length > 1) {\n      return barcodeParts[1].trim();\n    }\n  }\n  return \"\";\n}\n\nfunction extractBinning(content) {\n  const lines = content.split(\"\\n\");\n  const startIndex = lines.findIndex((line) => line.includes(\"Binning\"));\n  if (startIndex !== -1) {\n    const binningLine = lines[startIndex];\n    const binningParts = binningLine.split(\"\\t\");\n    if (binningParts.length > 1) {\n      return binningParts[1].trim();\n    }\n  }\n  return \"\";\n}\n\nfunction extractNumberOfRows(content) {\n  const lines = content.split(\"\\n\");\n  const startIndex = lines.findIndex((line) => line.includes(\"NumRows\"));\n  const endIndex = lines.findIndex((line) => line.includes(\"NumCols\"));\n  if (startIndex !== -1 && endIndex !== -1 && startIndex < endIndex) {\n    const numRowsLine = lines[startIndex];\n    return parseInt(numRowsLine.replace(/[^\\d]/g, \"\"), 10);\n  }\n  return 0;\n}\n\nfunction extractNumberOfColumns(content) {\n  const lines = content.split(\"\\n\");\n  const startIndex = lines.findIndex((line) => line.includes(\"NumCols\"));\n  const endIndex = lines.findIndex((line) => line.includes(\"Operator\"));\n  if (startIndex !== -1 && endIndex !== -1 && startIndex < endIndex) {\n    const numColsLine = lines[startIndex];\n    return parseInt(numColsLine.replace(/[^\\d]/g, \"\"), 10);\n  }\n  return 0;\n}\n\nfunction findLinesWith(lines, matchString) {\n  let ndxs = [];\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].includes(matchString)) {\n      ndxs.push(i);\n    }\n  }\n  return ndxs;\n}\n\nfunction getItem(line, ndx) {\n  let tokens = line.split(\"\\t\");\n  return tokens[ndx];\n}\n\nfunction getIndicators(content) {\n  const lines = content.split(\"\\n\");\n  let indicators = [];\n  let startNdxs = findLinesWith(lines, \"<INDICATOR_DATA\");\n  let endNdxs = findLinesWith(lines, \"</INDICATOR_DATA>\");\n  for (let i = 0; i < startNdxs.length; i++) {\n    let indicatorName = getItem(lines[startNdxs[i]], 1);\n    let startIndex = startNdxs[i];\n    let endIndex = endNdxs[i];\n    indicators.push({ id: i, indicatorName, startIndex, endIndex });\n  }\n  return indicators;\n}\n\nfunction extractLines(content, indicators) {\n  const lines = content.split(\"\\n\");\n  let extractedLinesByIndicator = {};\n  indicators.forEach(({ indicatorName, startIndex, endIndex }) => {\n    extractedLinesByIndicator[indicatorName] = lines.slice(\n      startIndex + 2,\n      endIndex\n    );\n  });\n  return extractedLinesByIndicator;\n}\n\nfunction extractIndicatorTimes(\n  extractedLinesByIndicator,\n  extractedRows,\n  extractedColumns\n) {\n  let indicatorTimes = {};\n  let analysisData = {};\n  for (let indicator in extractedLinesByIndicator) {\n    const extractedLines = extractedLinesByIndicator[indicator];\n    let times = [];\n    let dataPoints = [];\n    for (let i = 0; i < extractedLines.length; i++) {\n      const lineElements = extractedLines[i].split(\"\\t\");\n      times.push(parseFloat(lineElements[0].replace(\"\\r\", \"\")));\n      for (let j = 1; j < lineElements.length; j++) {\n        const dataPoint = parseFloat(lineElements[j].replace(\"\\r\", \"\"));\n        if (!isNaN(dataPoint)) {\n          dataPoints.push(dataPoint);\n        }\n      }\n    }\n    indicatorTimes[indicator] = times;\n    analysisData[indicator] = dataPoints;\n  }\n  return { indicatorTimes, analysisData };\n}\n\nfunction extractAllData(content) {\n  let extractedRows = extractNumberOfRows(content);\n  let rowLabels = generateRowLabels(extractedRows);\n  let extractedColumns = extractNumberOfColumns(content);\n  let extractedProjectTitle = extractProjectTitle(content);\n  let extractedProjectDate = extractProjectDate(content);\n  let extractedProjectTime = extractProjectTime(content);\n  let extractedProjectInstrument = extractInstrument(content);\n  let extractedProjectProtocol = extractProjectProtocol(content);\n  let extractedAssayPlateBarcode = extractAssayPlateBarcode(content);\n  let extractedAddPlateBarcode = extractAddPlateBarcode(content);\n  let extractedBinning = extractBinning(content);\n  let extractedIndicatorConfigurations =\n    extractIndicatorConfigurations(content);\n  let extractedOperator = extractOperator(content);\n  let extractedIndicators = getIndicators(content);\n  let extractedLines = extractLines(content, extractedIndicators);\n  let { indicatorTimes: extractedIndicatorTimes, analysisData } =\n    extractIndicatorTimes(extractedLines, extractedRows, extractedColumns);\n  return {\n    extractedIndicators,\n    extractedLines,\n    extractedRows,\n    rowLabels,\n    extractedColumns,\n    extractedProjectTitle,\n    extractedProjectDate,\n    extractedProjectTime,\n    extractedProjectInstrument,\n    extractedProjectProtocol,\n    extractedAssayPlateBarcode,\n    extractedAddPlateBarcode,\n    extractedBinning,\n    extractedIndicatorConfigurations,\n    extractedOperator,\n    extractedIndicatorTimes,\n    analysisData,\n  };\n}\n\n// Use 'self' for web worker global context (ESLint may warn, but this is correct for workers)\n// eslint-disable-next-line no-restricted-globals\nself.onmessage = function (e) {\n  const { content } = e.data;\n  const result = extractAllData(content);\n  // eslint-disable-next-line no-restricted-globals\n  self.postMessage(result);\n};\n"],"names":["findLinesWith","lines","matchString","ndxs","i","length","includes","push","extractAllData","content","extractedRows","split","startIndex","findIndex","line","endIndex","numRowsLine","parseInt","replace","extractNumberOfRows","rowLabels","labels","label","n","String","fromCharCode","Math","floor","generateRowLabels","extractedColumns","numColsLine","extractNumberOfColumns","extractedProjectTitle","projectParts","trim","extractProjectTitle","extractedProjectDate","dateParts","extractProjectDate","extractedProjectTime","timeParts","extractProjectTime","extractedProjectInstrument","instrumentParts","extractInstrument","extractedProjectProtocol","protocolParts","extractProjectProtocol","extractedAssayPlateBarcode","barcodeParts","extractAssayPlateBarcode","extractedAddPlateBarcode","extractAddPlateBarcode","extractedBinning","binningParts","extractBinning","extractedIndicatorConfigurations","indicatorConfigurations","forEach","parts","config","name","Excitation","Emission","Exposure","Gain","extractIndicatorConfigurations","extractedOperator","slice","map","part","extractOperator","extractedIndicators","indicators","startNdxs","endNdxs","indicatorName","ndx","id","getIndicators","extractedLines","extractedLinesByIndicator","_ref","extractLines","indicatorTimes","extractedIndicatorTimes","analysisData","indicator","times","dataPoints","lineElements","parseFloat","j","dataPoint","isNaN","extractIndicatorTimes","self","onmessage","e","data","result","postMessage"],"sourceRoot":""}